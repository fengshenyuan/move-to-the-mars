# -*- coding: utf-8 -*-
import sys


sys.path.append('../')

import sklearn
import sklearn.preprocessing
import numpy as np
from datetime import datetime
import math
from utilx.constant import CONST, RedisKeyConstant
import traceback
from utilx.utils import Utils
import logging
from utilx.redix import RedisService
import time
from database.helper import DB_Session

from handlers.base import MetaHandler

import random


class VideoTabRankingWithWFAlgorithmHandler(MetaHandler):
    # 该算法主要解决如何在一个社区中进行时间衰减的度量问题, 比如:
    # 一个发帖时间比较久远但比较热门的帖子应该放在首页的什么位置合适?
    # 一个刚发的帖子应该放在什么位置?
    # 如何度量和调整时间的衰减的剧烈程度，保证时间衰减对排名的影响具有稳定性?

    # 算法简要 Let me tell you a story
    # 核心观点:将时间转换为等价的财富形式

    # 自创世节点T。开始，整个世界范围内，平均每秒产生了X次点赞，Y次阅读，Z次收藏，W次评论
    # 那么一个在时间节点T出生的孩子A，所能预见的世界所产生的财富总和为F = (T - T。) * (X, Y, Z, W)
    # F即是这个世界所赋予A的年轻光环，如果后续A它能从别处获得更多的财富，那么在总的财富较量中它将排在其他竞争者前面
    # 如果A、B、C...是同一时刻出生的孩子，那么它们的排名取决于它们后续从外部世界获取财富的平均效率
    # 如果它们每天获取外部财富的效率低于这个世界产生财富的评论效率，那么它们将被新出生的孩子A'、B'...挤出排名，跌落到更低的位置中去

    # 写成一般的数学形式
    # F。= ∑(T - T。)* X， X = (x1, x2, ..., xn), xi表示在世界W中i类型的财富的平均产值
    # F = F。+ G，G = (A1, A2, ..., An), Ai表示A出生之后从外部获得i类型财富值
    # S = P * F， P = (p1, p2, ..., pn), pi表示计算最终排名分数时A对应的i类型财富的计算比例

    # 其中，F。表示孩子A在世界W中进行冒险的初始财富，G表示A到目前为止在世界W中获得外部财富，F表示孩子目前拥有的总财富

    # 在世界M:VideoTabRankingWithHandler中，整个世界的边界是所有需要参与排序的帖子所构成的世界，即所有的视频和短视频帖
    # M中需要量化的财富类型共四种
    # post_like_count
    # post_collection_count
    # post_read_count
    # post_comment_count

    # X变量，财富平均生产率 单位 xx/s,多少个xx量每秒
    x1 = 100 # 每秒平均点赞数
    x2 = 120 # 每秒平均阅读数
    x3 = 50  # 每秒平均收藏数
    x4 = 50  # 每秒平均评论数

    X = [x1, x2, x3, x4]

    # P，各类财富计分时的占比
    # base_score = 0.55 * post_like_count + 0.05 * post_read_count + 0.20 * post_x_count + 0.20 * post_comment_count
    p1 = 0.55  # 点赞数计分占比
    p2 = 0.05  # 阅读数计分占比
    p3 = 0.20  # 收藏数计分占比
    p4 = 0.20  # 评论数计分占比

    P = [p1, p2, p3, p4]


    # 提前计算好PX_SCORE,即单位时间内有效财富计分值
    # 这样计算get_post_create_time_init_score时只需要乘以时间差即可，节约计算量
    PX_SCORE = sum(map(lambda x : x[0] * x[1] , zip(P, X)))

    def get_post_create_time_init_score(self, post_info):
        # 计算帖子出生时的天赋财富值

        post_create_time = post_info.post_create_time
        world_init_time = datetime(2014, 10, 1)  # 创世时间点，上线前修正为真正的时间点

        t = (post_create_time - world_init_time).total_seconds()

        score = t * self.PX_SCORE
        return score


    def get_post_interaction_score(self, post_info):
        # 计算帖子后天所得的财富值

        a1 = post_info.post_likes_count
        a2 = post_info.post_read
        a3 = post_info.post_collects_count
        a4 = post_info.post_comments_count

        A = [a1, a2, a3, a4]

        score = sum(map(lambda x: x[0] * x[1], zip(self.P, A)))

        return score

    def get_post_ranking_score(self, post_info):

        score1 = self.get_post_create_time_init_score(post_info)
        score2 = self.get_post_interaction_score(post_info)

        score = score1 + score2

        return score

    def run(self):

        # target_post_ids = []

        # ONLINE DATA
        target_post_ids = [6293207802437474349,
                6293223747588271450,
                6293223747589271926,
                6293245510875455330,
                6293258517831685919,
                6293258517832793741,
                6293274501954637184,
                6293274501955747196,
                6293274501955817616,
                6293274501957423322,
                6293274501957930643,
                6293274501958662795,
                6293274501958771681,
                6293274501959009891,
                6293274501959357870,
                6293274501959709645,
                6293274501959906351,
                6293274501960390884,
                6293274501960410621,
                6293274501961878925,
                6293274501962420314,
                6293274501962843509,
                6293274501963032884,
                6293274501963500538,
                6293274501964791878,
                6293274501966863712,
                6293274501970738916,
                6293274501970751476,
                6293274501971862325,
                6293274501972020329,
                6293274501973015220,
                6293576039310555102,
                6293576039311317638,
                6293576039312078597,
                6293576039312311034,
                6293576039312621219,
                6293576039317428725,
                6293576039318372539,
                6293615542238976065,
                6293615542239584610,
                6293615542239888325,
                6293615542239894275,
                6293615542241278385,
                6293615542241311854,
                6293615542242347244,
                6293615542242912865,
                6293615542243631249,
                6293615542244419011,
                6293615542244698937,
                6293615542245856960,
                6293615542246124940,
                6293615542246661282,
                6293615542246745094,
                6293615542246829912,
                6293615542249207432,
                6293615542249432559,
                6293615542249937830,
                6293615542250353789,
                6293615542252419998,
                6293615542253640971,
                6293615542253750470,
                6293615542253968006,
                6293615542254227626,
                6293615542254255918,
                6293615542254366065,
                6293615542254382845,
                6293615542255015161,
                6293615542255082621,
                6293615542255707017,
                6293615542256486040,
                6293615542256649870,
                6293615542256748683,
                6293615542257090963,
                6293615542257137421,
                6293615542257748998,
                6293615542258554193,
                6293615542258647584,
                6293615542258697250,
                6293615542259315153,
                6293615542259380028,
                6293615542259485757,
                6293615542259520809,
                6293615542259870201,
                6293615542259882058,
                6293615542259968425,
                6293615542259973996,
                6293615542260016954,
                6293615542260167078,
                6293615542260276262,
                6293615542260549196,
                6293615542260640870,
                6293615542260781067,
                6293615542260805346,
                6293615542260880227,
                6293615542261134646,
                6293615542261150928,
                6293615542261341072,
                6293615542261502308,
                6293615542262049954,
                6293615542262276215,
                6293615542262464125,
                6293615542262722082,
                6293615542262906724,
                6293615542262934528,
                6293615542263023616,
                6293615542263119993,
                6293615542263120625,
                6293615542263201452,
                6293615542263202106,
                6293615542263277313,
                6293615542263423054,
                6293615542263925066,
                6293615542264011782,
                6293615542264734216,
                6293615542265208816,
                6293615542265217071,
                6293615542265227390,
                6293615542265411329,
                6293615542267493151,
                6293615542267591551,
                6293615542268448670,
                6293615542268688645,
                6293615542268765410,
                6293615542269252098,
                6293615542269508415,
                6293615542269532967,
                6293615542269597589,
                6293615542269930070,
                6293615542270183766,
                6293615542270196419,
                6293615542270355141,
                6293615542270434051,
                6293615542271192094,
                6293615542271224795,
                6293615542272318544,
                6293615542272447919,
                6293615542272484428,
                6293615542272593485,
                6293615542272609570,
                6293615542273211229,
                6293615542273246035,
                6293615542273258872,
                6293615542273541272,
                6293615542273562339,
                6293615542273684623,
                6293615542273689225,
                6293615542273702567,
                6293615542274030709,
                6293615542274041027,
                6293615542274711655,
                6293615542275133181,
                6293615542275369596,
                6293615542275821255,
                6293615542276034882,
                6293615542276078621,
                6293615542276141840,
                6293615542276318548,
                6293615542276562624,
                6293615542276595031,
                6293615542276610069,
                6293615542277160072,
                6293615542277282035,
                6293615542277304915,
                6293615542277317785,
                6293615542277409558,
                6293615542277668085,
                6293615542278026899,
                6293615542278350636,
                6293615542278394105,
                6293615542278781138,
                6293615542279509069,
                6293615542279859795,
                6293615542280302529,
                6293615542280765808,
                6293615542280772084,
                6293615542280815627,
                6293615542280849544,
                6293615542281251010,
                6293615542281259932,
                6293615542282036067,
                6293615542282093219,
                6293615542282632692,
                6293615542282888711,
                6293615542283031471,
                6293615542283220377,
                6293615542283558505,
                6293615542283645565,
                6293615542283800980,
                6293615542283985653,
                6293615542284456576,
                6293615542284613868,
                6293615542284788050,
                6293615542284799202,
                6293615542284801900,
                6293615542284823957,
                6293615542284831352,
                6293615542284962233,
                6293615542284980568,
                6293615542284989016,
                6293615542284996350,
                6293615542285040259,
                6293615542285248560,
                6293615542285249530,
                6293615542285429580,
                6293615542285488059,
                6293615542285560422,
                6293615542286142330,
                6293615542286317814,
                6293615542286346543,
                6293615542286439332,
                6293615542286449576,
                6293615542286452793,
                6293615542286453778,
                6293615542286503883,
                6293615542286704433,
                6293615542286715815,
                6293615542286932262,
                6293615542287018704,
                6293615542287041081,
                6293615542287483073,
                6293615542288137127,
                6293615542288316569,
                6293615542288578832,
                6293615542289107936,
                6293615542289313165,
                6293615542289464378,
                6293615542289548531,
                6293615542289946164,
                6293615542290070413,
                6293754345683204638,
                6293754345684135970,
                6293754345684223724,
                6293754345684446602,
                6293754345684615075,
                6293754345684637585,
                6293754345684703363,
                6293754345684761824,
                6293754345684966579,
                6293754345685868609,
                6293754345686211743,
                6293754345688415579,
                6293754345688895193,
                6293754345689568023,
                6293754345689763801,
                6293754345689925452,
                6293754345689963031,
                6293754345690454119,
                6293754345690684418,
                6293754345690694173,
                6293754345691872545,
                6293754345691880307,
                6293754345691881309,
                6293754345691940130,
                6293754345692299843,
                6293754345692614160,
                6293754345692857655,
                6293754345693361711,
                6293754345693384735,
                6293754345694706028,
                6293754345694971517,
                6293754345695288642,
                6293754345695938011,
                6293754345696914505,
                6293754345697037746,
                6293754345697600529,
                6293754345697810402,
                6293754345697991878,
                6293754345698533872,
                6293754345698930601,
                6293754345699523898,
                6293754345700647579,
                6293754345701308604,
                6293754345702323998,
                6293754345702655365,
                6293754345703118740,
                6293754345703332275,
                6293754345705504189,
                6293754345705664810,
                6293754345706643701,
                6293754345706975488,
                6293754345707333866,
                6293754345707500125,
                6293754345708278171,
                6293754345708311281,
                6293754345708313228,
                6293754345714566286,
                6293754345714923830,
                6293877835942165900,
                6293877835942266098,
                6293877835942556799,
                6293877835943780738,
                6293877835944482932,
                6293877835946014554,
                6293877835946238301,
                6293877835946788404,
                6293877835946923549,
                6293877835946926635,
                6293877835947610889,
                6293877835948369526,
                6293877835948687542,
                6293877835948949885,
                6293877835948978963,
                6293877835949283588,
                6293877835950255163,
                6293877835950266170,
                6293877835950321330,
                6293877835950594065,
                6293877835950606365,
                6293877835955597683,
                6293877835956349058,
                6293877835956386575,
                6293877835956793208,
                6293877835956813625,
                6293877835956889813,
                6293877835957522193,
                6293877835957753265,
                6293877835958054489,
                6293877835958182656,
                6293877835958198046,
                6293877835958739998,
                6293877835959614021,
                6293877835960012835,
                6293877835960160330,
                6293877835960249150,
                6293877835960347663,
                6293877835960511904,
                6293877835960835671,
                6293877835961126441,
                6293877835961349703,
                6293877835961583679,
                6293877835961699564,
                6293877835961746324,
                6293877835961999839,
                6293877835962555272,
                6293877835962659817,
                6293877835963142618,
                6293877835963170900,
                6293877835963279190,
                6293877835963598658,
                6293877835963604808,
                6293877835963605544,
                6293877835963633945,
                6293877835963815302,
                6293877835963858321,
                6293877835963874098,
                6293877835963982134,
                6293877835964267289,
                6293877835964282747,
                6293877835964421955,
                6293877835964422535,
                6293877835964765775,
                6293877835964923105,
                6293877835964991421,
                6293877835965035519,
                6293877835965202086,
                6293877835965610328,
                6293877835965646309,
                6293877835965717982,
                6293877835965745122,
                6293877835965764255,
                6293877835965995073,
                6293877835966041283,
                6293877835967179321,
                6293877835967233254,
                6293877835967900010,
                6293877835968040498,
                6293877835968850888,
                6293877835969357324,
                6293877835969681225,
                6293877835970233476,
                6293877835970529022,
                6293877835971073784,
                6293877835971341887,
                6293877835971471647,
                6293877835972094950,
                6293877835972097335,
                6293877835972351667,
                6293877835972365430,
                6293877835972756526,
                6293877835973301377,
                6293877835973534511,
                6293877835973729732,
                6293877835974131428,
                6293877835974255401,
                6293877835975092045,
                6293877835975234153,
                6293877835975359571,
                6293877835975682330,
                6293877835976126210,
                6293877835976259506,
                6293877835976800654,
                6293877835976900959,
                6293877835977337916,
                6293877835977963181,
                6293877835978078505,
                6293877835978273736,
                6293877835978488673,
                6293877835979433903,
                6293877835980252254,
                6293877835980664349,
                6293877835980775267,
                6293877835981025511,
                6293877835981211222,
                6293877835981472210,
                6293877835982302685,
                6293877835982691032,
                6293877835982728999,
                6293877835982761860,
                6293877835983177794,
                6293877835983193147,
                6293877835983258504,
                6293877835984530354,
                6293877835984539408,
                6293877835986958843,
                6293877835987218779,
                6293877835987292855,
                6293877835987457585,
                6293877835987721066,
                6293877835988060933,
                6293877835988338389,
                6293877835988681023,
                6293877835990254506,
                6293877835990495825,
                6293877835991275683,
                6293877835991875083,
                6293877835991918559,
                6293877835992249839,
                6293877835992274729,
                6293877835996744033,
                6293877835997188671,
                6293877835997226421,
                6293877835997530930,
                6293877835998467645,
                6293877835998897306,
                6293877835999027799,
                6293877835999394570,
                6293877836000017289,
                6293877836000676113,
                6293877836000914356,
                6294189047309457039,
                6294189047310160402,
                6294189047311313062,
                6294189047312340940,
                6294196636854508700,
        ]

        post_info_list = self._post_control.get_post_tab_ranking_info_by_post_ids(target_post_ids, with_slave=True)

        post_score_dict = {}
        for x in post_info_list:
            post_id = x.post_id
            post_score = self.get_post_ranking_score(post_info=x)
            # zadd required that key must be a str
            post_score_dict[str(post_id)] = post_score

        RedisService.init_video_tab_post_ranking_with_wfa_algorithm(post_score_dict)


if __name__ == "__main__":
    try:
        logging.getLogger().setLevel(logging.INFO)
        handler = VideoTabRankingWithWFAlgorithmHandler()
        handler.run()

        handler.close_db_session()

    except Exception as ex:
        logging.info(traceback.format_exc())


    method_end = True


